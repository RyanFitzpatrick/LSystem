#include <iostream>
#include <fstream>

#pragma pack( push, 2 ) // avoid structure padding... I am using Win32 here

struct BITMAPFILEHEADER
{
    unsigned short  bfType;
    unsigned int    bfSize;
    unsigned short  bfReserved1;
    unsigned short  bfReserved2;
    unsigned int    bfOffBits;
};

struct BITMAPINFOHEADER
{
    unsigned int    biSize;
    int             biWidth;
    int             biHeight;
    unsigned short  biPlanes;
    unsigned short  biBitCount;
    unsigned int    biCompression;
    unsigned int    biSizeImage;
    int             biXPelsPerMeter;
    int             biYPelsPerMeter;
    unsigned int    biClrUsed;
    unsigned int    biClrImportant;
};

#pragma pack() // avoid structure padding... I am using Win32 here

using namespace std;

void saveBitmap( const string & p_output, int p_width, int p_height )
{
    BITMAPFILEHEADER bitmapFileHeader;
    memset( &bitmapFileHeader, 0xff, sizeof( BITMAPFILEHEADER ) );
    bitmapFileHeader.bfType = ( 'B' | 'M' << 8 );
    bitmapFileHeader.bfOffBits = sizeof( BITMAPFILEHEADER ) + sizeof( BITMAPINFOHEADER );
    bitmapFileHeader.bfSize = bitmapFileHeader.bfOffBits + ( p_width + ( p_width % 4 ? ( 4 - p_width % 4 ) : 0 ) ) * p_height; // multiply by 3 if you wanna switch to RGB

    BITMAPINFOHEADER bitmapInfoHeader;
    memset( &bitmapInfoHeader, 0, sizeof( BITMAPINFOHEADER ) );
    bitmapInfoHeader.biSize = sizeof( BITMAPINFOHEADER );
    bitmapInfoHeader.biWidth = p_width;
    bitmapInfoHeader.biHeight = p_height;
    bitmapInfoHeader.biPlanes = 1;
    bitmapInfoHeader.biBitCount = 8; // this means grayscale, change to 24 if you wanna switch to RGB

    ofstream file( p_output, ios::binary );

    file.write( reinterpret_cast< char * >( &bitmapFileHeader ), sizeof( bitmapFileHeader ) );
    file.write( reinterpret_cast< char * >( &bitmapInfoHeader ), sizeof( bitmapInfoHeader ) );

    // bitmaps grayscale must have a table of colors... don't write this table if you want RGB
    unsigned char grayscale[ 4 ];

    for ( int i( 0 ); i < 256; ++i )
    {
        memset( grayscale, i, sizeof( grayscale ) );
        file.write( reinterpret_cast< char * >( grayscale ), sizeof( grayscale ) );
    }

    // here we record the pixels... I created a gradient...
    // remember that the pixels ordem is from left to right, "bottom to top"...
    unsigned char pixel[ 1 ]; // do pixel[ 3 ] if you want RGB

    for ( int y( 0 ); y < p_height; ++y )
    {
        for ( int x( 0 ); x < p_width + ( p_width % 4 ? ( 4 - p_width % 4 ) : 0 ); ++x ) // + ( p_width % 4 ? ( 4 - p_width % 4 ) : 0 ) because BMP has a padding of 4 bytes per line
        {
            if ( x > p_width )
            {
                pixel[ 0 ] = 0; // this is just padding
                file.write( reinterpret_cast< char * >( pixel ), sizeof( pixel ) );
            }
            else
            {
                pixel[ 0 ] = 255 * ( x * y ) / ( p_width * p_height );
                file.write( reinterpret_cast< char * >( pixel ), sizeof( pixel ) );
            }
        }
    }

    file.close( );
}

int main( int argc, char * argv[] )
{
    saveBitmap( "test.bmp", 1000, 1000 );
    return 0;
}

0.101201 -fitness
6
4,4,5,2,-0.0800735,0.500058
1,1,3,3,-0.004651,0.581664
2,1,1,3,0.440361,0.977725
1,1,3,3,-0.128067,0.507773
0,0,4,4,0.214676,0.800868
1,5,3,1,0.434368,0.974003
0.140769 -fitness
6
1,1,1,5,0.261414,0.845932
4,2,2,2,-0.396092,0.794549
1,1,1,1,0.436386,0.500044
3,1,1,1,0.0476723,0.500333
0,4,4,4,0.135895,0.500017
2,3,3,3,-0.201646,0.843106
0.132659 -fitness
6
1,3,5,1,0.792216,0.725623
4,4,4,4,-0.685508,0.945826
1,2,1,1,-0.100233,0.660831
1,1,4,1,-0.485278,0.593403
1,1,1,1,0.22111,0.503934
2,0,1,2,-0.656325,0.500337
0.123736 -fitness
6
2,2,5,3,-0.123095,0.500307
1,1,3,3,-0.0638145,0.500468
1,1,2,2,0.365557,0.62072
3,3,3,3,0.106342,0.893363
3,3,0,3,-0.322863,0.500526
4,5,4,4,0.527439,0.917334
0.127493 -fitness
6
4,2,1,1,-0.231312,0.795452
3,3,2,2,0.00972263,0.790355
3,3,3,3,-0.035073,0.726871
2,2,2,2,0.441181,0.648009
2,2,2,5,0.124742,0.537331
0,4,4,5,0.675999,0.918621
0.113384 -fitness
6
0,2,1,3,0.0468892,0.500163
3,4,0,3,-0.0753438,0.500427
3,0,5,3,-0.070639,0.50115
3,0,0,0,0.143695,0.959244
1,4,1,1,0.838247,0.999853
2,2,5,2,0.830637,0.996452
0.10592 -fitness
6
2,4,2,1,-0.295888,0.609673
5,3,3,3,0.946093,0.999925
0,2,0,2,0.505769,0.501006
3,3,3,3,-0.0973549,0.745431
0,0,4,0,0.510381,0.760462
1,5,5,3,-0.00453365,0.585465
0.13403 -fitness
6
1,1,1,5,-0.182217,0.500477
3,3,4,2,0.995494,0.500497
3,2,2,0,-0.343179,0.500078
0,1,0,0,-0.889968,0.500167
0,0,1,0,-0.790005,0.705862
5,0,0,0,0.392839,0.999813
0.119713 -fitness
6
3,0,0,4,0.0890285,0.50002
3,3,3,1,0.791046,0.999406
2,2,2,0,0.246947,0.56096
0,0,0,1,-0.108028,0.500661
5,2,2,2,-0.261307,0.526076
5,2,2,4,0.816024,0.999785
0.113546 -fitness
6
1,2,2,4,-0.120503,0.561942
5,5,5,1,0.329968,0.999891
5,2,2,5,0.337306,0.500084
2,2,2,0,-0.314258,0.50004
4,3,3,3,0.463129,0.897807
2,2,2,2,-0.170939,0.500277
0.113144 -fitness
6
1,3,4,3,0.206094,0.544921
1,0,1,5,-0.191274,0.500039
3,3,3,3,-0.394922,0.500045
3,2,3,2,0.0797875,0.682384
2,5,2,2,-0.0330579,0.500044
1,5,1,5,0.492042,0.763453
0.115501 -fitness
6
3,5,4,4,-0.0656377,0.500026
4,4,0,0,-0.526399,0.500487
1,1,1,1,-0.663532,0.50002
1,1,1,3,0.546974,0.70063
1,1,2,2,0.778905,0.573094
0,0,5,0,0.239781,0.999892
0.129099 -fitness
6
3,3,2,2,0.20147,0.519549
3,3,1,1,0.524659,0.500522
4,4,0,0,-0.30657,0.500746
5,5,1,1,-0.36998,0.606448
4,4,2,2,0.530624,0.563709
3,3,0,0,0.218481,0.500029
0.135818 -fitness
6
4,4,4,3,0.114223,0.653273
3,1,1,2,-0.348617,0.500198
0,4,4,4,-0.79346,0.500397
5,2,2,2,0.460527,0.654906
4,0,0,0,-0.010702,0.5002
3,1,1,2,0.304981,0.999996
0.139923 -fitness
6
5,3,3,3,-0.378504,0.836212
1,2,2,2,0.318296,0.812781
4,1,1,2,0.814459,0.99952
0,0,0,0,0.563982,0.500132
5,4,4,2,0.43584,0.560921
3,3,3,4,0.264927,0.500443
0.113097 -fitness
6
1,3,5,1,0.00804335,0.500026
1,0,0,1,0.173948,0.57282
0,0,1,0,-0.343896,0.500067
2,2,3,2,0.404354,0.999472
5,4,2,5,0.937615,0.991131
1,4,0,1,0.0161488,0.500031
0.106806 -fitness
6
5,4,3,4,0.36165,0.635595
4,4,4,4,-0.694948,0.500072
0,4,0,4,-0.526752,0.500136
1,3,1,1,0.303327,0.885087
2,1,2,1,0.118225,0.641849
1,1,1,5,0.266821,0.839092
0.131679 -fitness
6
2,2,2,1,0.0965933,0.966548
1,5,5,3,0.23812,0.979315
4,2,2,2,0.0390303,0.623618
2,4,4,4,-0.289403,0.500016
2,2,2,2,-0.0961255,0.500383
2,4,4,4,-0.224133,0.500104
0.115685 -fitness
6
3,1,5,5,0.506819,0.722298
1,1,0,1,-0.3366,0.500343
4,4,4,2,0.0702486,0.665198
4,4,4,2,0.0940896,0.862892
5,5,5,2,-0.575307,0.500106
5,5,4,4,-0.0880826,0.634756
0.0805036 -fitness
6
5,4,1,3,-0.146541,0.501209
2,1,2,2,0.455008,0.903654
3,3,3,3,-0.262687,0.500105
3,2,2,2,0.467575,0.732309
0,2,4,0,0.379993,0.997654
2,0,0,5,0.374792,0.999019
0.114968 -fitness
6
3,4,3,5,0.323211,0.523322
1,5,5,2,0.719599,0.996981
4,2,4,2,-0.375552,0.50035
3,0,3,0,-0.290363,0.500002
2,2,0,2,-0.0872559,0.591756
1,5,5,2,-0.23832,0.50042
0.0821659 -fitness
6
4,5,3,2,-0.188693,0.53477
5,0,1,5,0.732751,0.999594
2,0,0,0,0.402688,0.923761
0,3,0,0,0.411077,0.897133
0,0,0,4,0.412012,0.884495
5,5,1,5,0.22397,0.500123
0.0799513 -fitness
6
4,3,5,2,-0.193345,0.505778
2,2,2,2,-0.071715,0.500006
2,1,1,1,0.360309,0.89444
1,0,3,1,0.373966,0.999792
0,1,1,4,0.375878,0.998936
1,5,0,1,0.380174,0.997163
0.104579 -fitness
6
4,1,2,5,0.051537,0.500758
1,0,3,1,-0.00940088,0.50001
2,3,0,2,-0.0082813,0.500242
3,3,3,3,0.350228,0.759191
0,4,4,3,-0.0100165,0.500172
3,5,5,0,-0.00579114,0.500021
0.131893 -fitness
6
3,3,3,1,0.145639,0.597205
4,2,2,5,-0.372179,0.746712
2,0,0,3,0.309281,0.500203
3,5,5,5,-0.0997244,0.50006
4,1,1,1,0.777412,0.796954
3,3,3,0,0.262882,0.500035
0.101966 -fitness
6
2,1,3,1,-0.740603,0.554145
1,5,1,5,0.855111,0.57418
5,5,5,2,0.543074,0.931988
5,3,5,5,0.523714,0.948335
5,5,5,5,0.81812,0.580344
4,4,4,4,0.176748,0.617067
0.0578261 -fitness
6
4,2,5,1,-0.249232,0.626705
1,3,3,3,0.355873,0.999625
3,3,2,3,0.352565,0.99934
3,3,3,3,0.0846702,0.500206
3,3,3,4,0.347718,0.99991
3,5,3,3,0.356116,0.999937
0.123391 -fitness
6
5,2,1,2,0.325011,0.500237
4,0,3,4,-0.153942,0.915579
0,3,0,3,-0.287269,0.500006
4,4,4,4,-0.43394,0.91455
3,3,3,3,0.312456,0.999667
3,4,4,0,-0.16006,0.902754
0.103846 -fitness
6
3,4,2,4,0.28458,0.576463
5,3,3,1,0.528253,0.999797
5,2,5,5,0.320832,0.951889
5,5,5,1,-0.0217786,0.501207
4,5,4,5,0.029439,0.567261
0,0,0,0,-0.781797,0.500902
0.10848 -fitness
6
4,4,3,1,0.290341,0.511122
2,1,1,4,-0.249315,0.500194
2,1,1,5,0.900138,0.861534
5,3,5,5,0.35453,0.801383
4,4,0,0,-0.253692,0.5001
4,0,4,4,-0.865656,0.500046
